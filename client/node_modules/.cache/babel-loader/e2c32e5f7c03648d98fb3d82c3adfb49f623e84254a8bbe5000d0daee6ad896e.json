{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Uporabnik\\\\spletna-aplikacija-avtomobili\\\\client\\\\src\\\\container\\\\CarManagement.js\",\n  _s = $RefreshSig$();\n// CarManagement.js\nimport React, { useState, useEffect } from 'react';\nimport Home from '../pages/Home';\nimport TabelaCars from '../components/tabelaCars';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CarManagement() {\n  _s();\n  const [filterType, setFilterType] = useState(\"\");\n  const [filterName, setFilterName] = useState(\"\");\n  const [cars, setCars] = useState([]); // Initialize cars state\n  const [carsFiltered, setCarsFiltered] = useState([]); // Initialize carsFiltered state\n\n  const handleFilterTypeChange = value => {\n    setFilterType(value);\n  };\n  const handleFilterNameChange = value => {\n    setFilterName(value);\n  };\n  useEffect(() => {\n    // Fetch your data here (replace 'your-api-endpoint' with your actual API endpoint)\n    fetch(\"your-api-endpoint\").then(res => res.json()).then(data => {\n      console.log(\"Fetched data:\", data);\n      setCars(data);\n    }).catch(error => console.error(\"Error:\", error));\n  }, []); // Empty dependency array to run the effect only once\n\n  useEffect(() => {\n    // Filter cars based on user input\n    const filtered = cars.filter(car => {\n      if (filterType && car.type !== filterType) {\n        return false;\n      }\n      if (filterName && car.name !== filterName) {\n        return false;\n      }\n      return true;\n    });\n    console.log(\"Filtered cars:\", filtered);\n    setCarsFiltered(filtered);\n  }, [cars, filterType, filterName]);\n\n  // Add another effect to handle the case where both filters are empty (no filters)\n  useEffect(() => {\n    if (!filterType && !filterName) {\n      // If both filters are empty, return all cars\n      setCarsFiltered(cars);\n    }\n  }, [filterType, filterName, cars]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TabelaCars, {\n      filterType: filterType,\n      filterName: filterName,\n      handleFilterTypeChange: handleFilterTypeChange,\n      handleFilterNameChange: handleFilterNameChange,\n      carsFiltered: carsFiltered || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(CarManagement, \"ddLWiCn+gMTaJx+ioSrjjRY9708=\");\n_c = CarManagement;\nexport default CarManagement;\nvar _c;\n$RefreshReg$(_c, \"CarManagement\");","map":{"version":3,"names":["React","useState","useEffect","Home","TabelaCars","jsxDEV","_jsxDEV","Fragment","_Fragment","CarManagement","_s","filterType","setFilterType","filterName","setFilterName","cars","setCars","carsFiltered","setCarsFiltered","handleFilterTypeChange","value","handleFilterNameChange","fetch","then","res","json","data","console","log","catch","error","filtered","filter","car","type","name","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Uporabnik/spletna-aplikacija-avtomobili/client/src/container/CarManagement.js"],"sourcesContent":["// CarManagement.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Home from '../pages/Home';\r\nimport TabelaCars from '../components/tabelaCars';\r\n\r\nfunction CarManagement() {\r\n  const [filterType, setFilterType] = useState(\"\");\r\n  const [filterName, setFilterName] = useState(\"\");\r\n  const [cars, setCars] = useState([]); // Initialize cars state\r\n  const [carsFiltered, setCarsFiltered] = useState([]); // Initialize carsFiltered state\r\n\r\n  const handleFilterTypeChange = (value) => {\r\n    setFilterType(value);\r\n  };\r\n\r\n  const handleFilterNameChange = (value) => {\r\n    setFilterName(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch your data here (replace 'your-api-endpoint' with your actual API endpoint)\r\n    fetch(\"your-api-endpoint\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"Fetched data:\", data);\r\n        setCars(data);\r\n      })\r\n      .catch((error) => console.error(\"Error:\", error));\r\n  }, []); // Empty dependency array to run the effect only once\r\n\r\n  useEffect(() => {\r\n    // Filter cars based on user input\r\n    const filtered = cars.filter((car) => {\r\n      if (filterType && car.type !== filterType) {\r\n        return false;\r\n      }\r\n      if (filterName && car.name !== filterName) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  \r\n    console.log(\"Filtered cars:\", filtered);\r\n  \r\n    setCarsFiltered(filtered);\r\n  }, [cars, filterType, filterName]);\r\n  \r\n  // Add another effect to handle the case where both filters are empty (no filters)\r\n  useEffect(() => {\r\n    if (!filterType && !filterName) {\r\n      // If both filters are empty, return all cars\r\n      setCarsFiltered(cars);\r\n    }\r\n  }, [filterType, filterName, cars]);\r\n\r\n  return (\r\n    <>\r\n    \r\n      <TabelaCars\r\n        filterType={filterType}\r\n        filterName={filterName}\r\n        handleFilterTypeChange={handleFilterTypeChange}\r\n        handleFilterNameChange={handleFilterNameChange}\r\n        carsFiltered={carsFiltered || []}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CarManagement;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtD,MAAMkB,sBAAsB,GAAIC,KAAK,IAAK;IACxCR,aAAa,CAACQ,KAAK,CAAC;EACtB,CAAC;EAED,MAAMC,sBAAsB,GAAID,KAAK,IAAK;IACxCN,aAAa,CAACM,KAAK,CAAC;EACtB,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd;IACAoB,KAAK,CAAC,mBAAmB,CAAC,CACvBC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC;MAClCV,OAAO,CAACU,IAAI,CAAC;IACf,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAKH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;EACrD,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER5B,SAAS,CAAC,MAAM;IACd;IACA,MAAM6B,QAAQ,GAAGhB,IAAI,CAACiB,MAAM,CAAEC,GAAG,IAAK;MACpC,IAAItB,UAAU,IAAIsB,GAAG,CAACC,IAAI,KAAKvB,UAAU,EAAE;QACzC,OAAO,KAAK;MACd;MACA,IAAIE,UAAU,IAAIoB,GAAG,CAACE,IAAI,KAAKtB,UAAU,EAAE;QACzC,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb,CAAC,CAAC;IAEFc,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEG,QAAQ,CAAC;IAEvCb,eAAe,CAACa,QAAQ,CAAC;EAC3B,CAAC,EAAE,CAAChB,IAAI,EAAEJ,UAAU,EAAEE,UAAU,CAAC,CAAC;;EAElC;EACAX,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,UAAU,IAAI,CAACE,UAAU,EAAE;MAC9B;MACAK,eAAe,CAACH,IAAI,CAAC;IACvB;EACF,CAAC,EAAE,CAACJ,UAAU,EAAEE,UAAU,EAAEE,IAAI,CAAC,CAAC;EAElC,oBACET,OAAA,CAAAE,SAAA;IAAA4B,QAAA,eAEE9B,OAAA,CAACF,UAAU;MACTO,UAAU,EAAEA,UAAW;MACvBE,UAAU,EAAEA,UAAW;MACvBM,sBAAsB,EAAEA,sBAAuB;MAC/CE,sBAAsB,EAAEA,sBAAuB;MAC/CJ,YAAY,EAAEA,YAAY,IAAI;IAAG;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC;EAAC,gBACF,CAAC;AAEP;AAAC9B,EAAA,CA9DQD,aAAa;AAAAgC,EAAA,GAAbhC,aAAa;AAgEtB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}