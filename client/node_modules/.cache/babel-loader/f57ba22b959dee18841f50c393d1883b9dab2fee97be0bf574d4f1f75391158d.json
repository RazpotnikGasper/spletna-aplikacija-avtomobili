{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Uporabnik\\\\spletna-aplikacija-avtomobili\\\\client\\\\src\\\\container\\\\CarManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Home from '../pages/Home';\nimport TabelaCars from '../components/tabelaCars';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CarManagement() {\n  _s();\n  const [filterType, setFilterType] = useState(\"\");\n  const [filterName, setFilterName] = useState(\"\");\n  const [cars, setCars] = useState([]); // Initialize cars state\n  const [carsFiltered, setCarsFiltered] = useState([]); // Initialize carsFiltered state\n  const [dataFetched, setDataFetched] = useState(false); // Track whether data is fetched\n\n  const handleFilterTypeChange = value => {\n    setFilterType(value);\n  };\n  const handleFilterNameChange = value => {\n    setFilterName(value);\n  };\n  useEffect(() => {\n    // Fetch your data here (replace 'your-api-endpoint' with your actual API endpoint)\n    fetch(\"your-api-endpoint\").then(res => res.json()).then(data => {\n      console.log(\"Fetched data:\", data);\n      setCars(data);\n      setDataFetched(true); // Update dataFetched once data is fetched\n    }).catch(error => console.error(\"Error:\", error));\n  }, []); // Empty dependency array to run the effect only once\n\n  useEffect(() => {\n    // Filter cars based on user input\n    const filtered = cars.filter(car => {\n      if (filterType && car.type !== filterType) {\n        return false;\n      }\n      if (filterName && car.name !== filterName) {\n        return false;\n      }\n      return true;\n    });\n    console.log(\"Filtered cars:\", filtered);\n    setCarsFiltered(filtered);\n  }, [cars, filterType, filterName]);\n\n  // Add another effect to handle the case where both filters are empty (no filters)\n  useEffect(() => {\n    if (!filterType && !filterName && dataFetched) {\n      // If both filters are empty and data is fetched, return all cars\n      setCarsFiltered(cars);\n    }\n  }, [filterType, filterName, cars, dataFetched]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: dataFetched && /*#__PURE__*/_jsxDEV(TabelaCars, {\n      filterType: filterType,\n      filterName: filterName,\n      handleFilterTypeChange: handleFilterTypeChange,\n      handleFilterNameChange: handleFilterNameChange,\n      carsFiltered: carsFiltered || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(CarManagement, \"zqsQ4IjVK1ehTcfnlWJGBELBddY=\");\n_c = CarManagement;\nexport default CarManagement;\nvar _c;\n$RefreshReg$(_c, \"CarManagement\");","map":{"version":3,"names":["React","useState","useEffect","Home","TabelaCars","jsxDEV","_jsxDEV","Fragment","_Fragment","CarManagement","_s","filterType","setFilterType","filterName","setFilterName","cars","setCars","carsFiltered","setCarsFiltered","dataFetched","setDataFetched","handleFilterTypeChange","value","handleFilterNameChange","fetch","then","res","json","data","console","log","catch","error","filtered","filter","car","type","name","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Uporabnik/spletna-aplikacija-avtomobili/client/src/container/CarManagement.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Home from '../pages/Home';\r\nimport TabelaCars from '../components/tabelaCars';\r\n\r\nfunction CarManagement() {\r\n  const [filterType, setFilterType] = useState(\"\");\r\n  const [filterName, setFilterName] = useState(\"\");\r\n  const [cars, setCars] = useState([]); // Initialize cars state\r\n  const [carsFiltered, setCarsFiltered] = useState([]); // Initialize carsFiltered state\r\n  const [dataFetched, setDataFetched] = useState(false); // Track whether data is fetched\r\n\r\n  const handleFilterTypeChange = (value) => {\r\n    setFilterType(value);\r\n  };\r\n\r\n  const handleFilterNameChange = (value) => {\r\n    setFilterName(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch your data here (replace 'your-api-endpoint' with your actual API endpoint)\r\n    fetch(\"your-api-endpoint\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"Fetched data:\", data);\r\n        setCars(data);\r\n        setDataFetched(true); // Update dataFetched once data is fetched\r\n      })\r\n      .catch((error) => console.error(\"Error:\", error));\r\n  }, []); // Empty dependency array to run the effect only once\r\n\r\n  useEffect(() => {\r\n    // Filter cars based on user input\r\n    const filtered = cars.filter((car) => {\r\n      if (filterType && car.type !== filterType) {\r\n        return false;\r\n      }\r\n      if (filterName && car.name !== filterName) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    console.log(\"Filtered cars:\", filtered);\r\n\r\n    setCarsFiltered(filtered);\r\n  }, [cars, filterType, filterName]);\r\n\r\n  // Add another effect to handle the case where both filters are empty (no filters)\r\n  useEffect(() => {\r\n    if (!filterType && !filterName && dataFetched) {\r\n      // If both filters are empty and data is fetched, return all cars\r\n      setCarsFiltered(cars);\r\n    }\r\n  }, [filterType, filterName, cars, dataFetched]);\r\n\r\n  return (\r\n    <>\r\n      {dataFetched && (\r\n        <TabelaCars\r\n          filterType={filterType}\r\n          filterName={filterName}\r\n          handleFilterTypeChange={handleFilterTypeChange}\r\n          handleFilterNameChange={handleFilterNameChange}\r\n          carsFiltered={carsFiltered || []}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CarManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}